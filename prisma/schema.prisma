generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Projeto {
  id                 Int                  @id @default(autoincrement())
  titulo             String
  imagem             String
  descricao          String
  categoria          String
  dataInicio         DateTime
  dataFim            DateTime
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  curso              Curso[]
  projetoColaborador projetoColaborador[]
  projetoUsuario     projetoUsuario[]
}

model Curso {
  id              Int            @id @default(autoincrement())
  titulo          String
  imagem          String
  descricao       String
  categoria       String
  cargaHoraria    Float
  linkInscricao   String
  vagas           Int
  bibliografia    String
  metodologia     String
  metodoAvaliacao String
  idProjeto       Int
  idUsuario       Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  aula            Aula[]
  projeto         Projeto        @relation(fields: [idProjeto], references: [id], onDelete: Cascade)
  usuario         Usuario        @relation(fields: [idUsuario], references: [id], onDelete: Cascade)
  cursoUsuario    cursoUsuario[]
}

model Aula {
  id        Int      @id @default(autoincrement())
  titulo    String
  linkPdf   String
  linkVideo String
  idCurso   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  curso     Curso    @relation(fields: [idCurso], references: [id], onDelete: Cascade)
}

model Usuario {
  id                Int              @id @default(autoincrement())
  email             String           @unique
  fotoPerfil        String
  senha             String
  Nome              String
  Titulacao         Titulacao        @default(Bacharel)
  instituicaoEnsino String
  formacaoAcademica String
  resumoPessoal     String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  curso             Curso[]
  link              Link[]
  publicacao        Publicacao[]
  cursoUsuario      cursoUsuario[]
  eventoUsuario     eventoUsuario[]
  projetoUsuario    projetoUsuario[]
}

model Link {
  id        Int      @id @default(autoincrement())
  link      String
  idUsuario Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tipo      tipoLink @default(Generico)
  usuario   Usuario  @relation(fields: [idUsuario], references: [id], onDelete: Cascade)
}

model Publicacao {
  id        Int      @id @default(autoincrement())
  descricao String
  link      String
  idUsuario Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usuario   Usuario  @relation(fields: [idUsuario], references: [id], onDelete: Cascade)
}

model Colaborador {
  id                 Int                  @id @default(autoincrement())
  nome               String
  categoria          colaboradorCategoria
  projetoColaborador projetoColaborador[]
}

model Evento {
  id               Int             @id @default(autoincrement())
  titulo           String
  descricao        String
  data             DateTime
  linkParticipacao String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  eventoUsuario    eventoUsuario[]
  imagemEvento     imagemEvento[]
}

model imagemEvento {
  id        Int      @id @default(autoincrement())
  link      String
  idEvento  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  evento    Evento   @relation(fields: [idEvento], references: [id], onDelete: Cascade)
}

model eventoUsuario {
  id               Int              @id @default(autoincrement())
  idUsuario        Int
  idEvento         Int
  tipoParticipacao tipoParticipacao @default(Ouvinte)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  evento           Evento           @relation(fields: [idEvento], references: [id], onDelete: Cascade)
  usuario          Usuario          @relation(fields: [idUsuario], references: [id], onDelete: Cascade)
}

model cursoUsuario {
  id        Int      @id @default(autoincrement())
  idCurso   Int
  idUsuario Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  curso     Curso    @relation(fields: [idCurso], references: [id], onDelete: Cascade)
  usuario   Usuario  @relation(fields: [idUsuario], references: [id], onDelete: Cascade)
}

model projetoUsuario {
  id        Int           @id @default(autoincrement())
  idProjeto Int
  idUsuario Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  funcao    funcaoProjeto @default(Colaborador)
  projeto   Projeto       @relation(fields: [idProjeto], references: [id], onDelete: Cascade)
  usuario   Usuario       @relation(fields: [idUsuario], references: [id], onDelete: Cascade)
}

model projetoColaborador {
  id            Int         @id @default(autoincrement())
  idProjeto     Int
  idColaborador Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  colaborador   Colaborador @relation(fields: [idColaborador], references: [id], onDelete: Cascade)
  projeto       Projeto     @relation(fields: [idProjeto], references: [id], onDelete: Cascade)
}

enum tipoLink {
  Instragram
  Whatsapp
  Linkedin
  Facebook
  Generico @map("Genérico")
}

enum funcaoProjeto {
  Coordenador
  Colaborador
  Bolsista
  // Voluntário
}

enum Titulacao {
  Bacharel
  Licenciado
  Especialista
  Mestre
  Doutor
}

enum tipoParticipacao {
  Ouvinte
  Palestrante
  Organizador
}

enum colaboradorCategoria {
  Coordenador @map("Cordenador(a)")
  Colaborador @map("Colaborador(a)")
  Bolsista
  // Voluntário
}
